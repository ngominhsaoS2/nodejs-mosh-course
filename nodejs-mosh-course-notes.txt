11. Global Object
console is one of the global objects in JavaScript. NodeJs also has other global objects.
setTimeout(), clearTimeout(), setInterval(), clearInterval()...

On NodeJS, we dont have "window" global object, instead we have "global" as global object.
console.log(global.message) will return undefined.



12. Modules
console.log(module);
In NodeJs, every file can be considered as a module.



13. Creating a Module



14. Loading a Module
Use const logger = require('./logger'); instead of using var.
Because we dont want to accidentally change the logger variable.



15. Module Wrapper Function
In logger.js file, Node actually does not execute the code. Instead, Node wraps
everything in side the file into a function like below:

(function (exports, require, module, __filename, __dirname) {
    // code inside js file go here
    ...
})

This function is called "Module Wrapper Function"



16. Path Module



17. OS Module



18. File System Module



19. Events Module
Event is a signal that something has happened.

const EventEmitter = require('events'); :EventEmitter uppcase like this means this EventEmitter is a Class.
It's not a function, not a simple value, it's a class. Class contains properties, methods.
We have to create an instance of that class.



20. Event Arguments
We can pass data when emit even.



21. Extending Event Emitter
When a function is inside a class, it is called method.



22. HTTP Module
const server = http.createServer(); :server is exact EventEmitter.



25. Package.json
npm init :to create a package.json, then follow the instruction.
This step must be done before creating any package on Node.

npm init --yes :to setup default values for your answers.



26. Installing a Node Package
npm i underscore 



27. Using a Package
Priorities to load a module:
    - core modules
    - file or folder
    - node_modules



28. Package Dependencies



29. NPM Packages and Source Control
Add .gitignore file.



30. Semantic Versioning
major.minor.patch is called Semantic Version

^5.13.2 equals to 5.x.y
~5.13.2 equals to 5.13.x



31. Listing the Installed Packages
npm list :to list out exact version of installed packages.
npm list --depth=0 :just list out version of your app dependencies.



32. Viewing Registry Info for a Package
npm view <packagename> :to view some info of the package.
npm view <packagename> dependencies :to view the package's dependencies.
npm view <packagename> versions :to view the package's release notes.



33. Installing a Specific Version of a Package
npm i <package>@x.y.z



34. Updating Local Packages
npm outdated :to list out outdated packages.
npm update :to update outdated packages, but it just works for minor and patch outdated packages.
npm i -g npm-check-updates :to install a package just for checking packages updates.
    then run command "npm-check-updates"

ncu for shorthand.
ncu -u to upgrade package.json file. This command just upgrade the file, but does not install the new version yet.
    We have to run npm i again.



35. DevDependencies
npm i jshint --save-dev :to just save for development env.



36. Uninstalling a Package
npm un <packagename>



37. Working with Global Packages
npm i -g <packagename> :to install a package globally.
npm un -g <packagename> :to uninstall a package globally.
npm -g outdated :to check outdated global packages.



38. Publishing a Package
npm init --yes :remember to use the unique name for the package.
npm login
npm publish



39. Updating a Published Package
We can munuall update the package.json file or use command "npm version major/minor/patch"
Then run "npm publish"



43. Introducing Express
npm init --yes
npm i express



44. Building Your First Web Server



45. Nodemon
npm i -g nodemon :to install nodemon (Node Monitor)
Then, instead of "node index.js" we run "nodemon index.js"



46. Environment Variables
export PORT=3001 :to set a environment variable names "PORT" value 3001 in Mac.
set PORT=3001 :to do the same in Windows



47. Route Parameters
app.get('/api/courses/:year/:month', (req, res) => {
    res.send(req.params);
}); // result would be {"year":"1995","month":"01"}

We use Route Parameters for mandatory parameters.
We can also use query string parameters to provide additionals data.
    Then use req.query to access these parameters.



48. Handling HTTP GET Requests



49. Handling HTTP POST Requests
req.body.name :by default, this function won't work, needs to use a middleware of Express.
app.use(express.json()) :express.json() will return some middlewares, then our app uses these middlewares.



51. Input Validation
npm i joi@13.1.0



52. Handling HTTP PUT Requests



53. Handling HTTP Delete Requests



54. Project- Build the Genres API



57. Middleware



58. Creating Custom Middleware
Middlewares are called in sequence.



59. Built-In Middleware
app.use(express.static('public')); to searve static contents.
http://localhost:3000/readme.txt to check.



60. Third-party Middleware
Use many middlewares might effect the performance of the app. So be careful when using them.



61. Environments



62. Configuration
We should not store passwords and secret keys in config/<env>.json files.
Instead, we store them in environment variables.
    export <prefix>_<name_of_key>=something
    eg: export app_password=hehehe



63. Debugging
const startupDebugger = require('debug')('app:startup');

app:startup is a namespace that needs to be debugged.

export DEBUG=app:startup // one namespace
export DEBUG=app:startup,app:db // multiple namespaces
export DEBUG=app:* // wildcard

DEBUG=app:db nodemon index.js



64. Templating Engines
pug / jade
mustache
EJS

app.set('view engine', 'pug'); express will load this pug module, so we dont have to require it.



65. Database Integration



66. Authentication



67. Structuring Express Applications



68. Project- Restructure the App



82. Introducing MongoDB



83. Installing MongoDB on Mac
brew.sh - this is Homebrew, package manager for MacOS.



85. Connecting to MongoDB
npm in mongoose@5.0.1



86. Schemas
List of type when define properties on schemas:
    - String
    - Number
    - Date
    - Buffer (to store binary data)
    - Boolean
    - ObjectID
    - Array



87. Models
const Course = mongoose.model('Course', courseSchema);
The const Course here is a Class.



88. Saving a Document



89. Querying Documents



90. Comparison Query Operators
    - eq :equal
    - ne :not equal
    - gt :greater than
    - gte :greater than or equal
    - lt :less than
    - lte :less than or equal
    - in
    - nin :not in

eg: find({ price: { $gt: 10 } })
    find({ price: { $gte: 10, $lte: 20 } })
    find({ price: { $in: [10, 15, 20] } })



91. Logical Query Operators
    - or
    - and

eg: or([ { author: 'saonm' }, { isPublished: true} ])
    and([ { author: 'saonm' }, { isPublished: true} ])



92. Regular Expressions
.find({ author: /^sao/ }) // Starts with sao
.find({ author: /m$/i }) // Ends with sao, i is in-casesensitive
.find({ author: /.*sao.*/i }) // Contains with sao



93. Counting


